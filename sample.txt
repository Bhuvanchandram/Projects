/* eslint-disable @typescript-eslint/no-use-before-define */
import React, { useState } from "react";
import Pie, { ProvidedProps, PieArcDatum } from "@visx/shape/lib/shapes/Pie";
import { scaleOrdinal } from "@visx/scale";
import { Group } from "@visx/group";
import { GradientPinkBlue } from "@visx/gradient";
import letterFrequency, {
  LetterFrequency,
} from "@visx/mock-data/lib/mocks/letterFrequency";
import { animated, useTransition, interpolate } from "@react-spring/web";
import browserUsage from "./browserUsage.json";
import departments from "./departments.json";

// data and types
type BrowserNames = keyof (typeof browserUsage)[0];

interface BrowserUsage {
  label: BrowserNames;
  usage: number;
}

//data and types for departments
type DepartmentNames = keyof typeof departments;

interface GenderCount {
  Male: number;
  Female: number;
}

interface DepartmentData {
  label: DepartmentNames;
  data: GenderCount;
}

const letters: LetterFrequency[] = letterFrequency.slice(0, 4);

const browserNames = Object.keys(browserUsage[0]).filter(
  (k) => k !== "date"
) as BrowserNames[];
const browsers: BrowserUsage[] = browserNames.map((name) => ({
  label: name,
  usage: Number(browserUsage[0][name]),
}));

//For department data
const departmentNames = Object.keys(departments) as DepartmentNames[];
const departmentData: DepartmentData[] = departmentNames.map((name) => ({
  label: name,
  data: departments[name],
}));

// accessor functions
const usage = (d: BrowserUsage) => d.usage;

//For department data
const departmentAccessor = (d: DepartmentData) => d.label;

// Define accessor functions for the number of males and females in a department
const maleAccessor = (d: DepartmentData) => d.data.Male;
const femaleAccessor = (d: DepartmentData) => d.data.Female;

// color scales
const getBrowserColor = scaleOrdinal({
  domain: browserNames,
  range: [
    "rgba(255,255,255,0.7)",
    "rgba(255,255,255,0.6)",
    "rgba(255,255,255,0.5)",
    "rgba(255,255,255,0.4)",
    "rgba(255,255,255,0.3)",
    "rgba(255,255,255,0.2)",
    "rgba(255,255,255,0.1)",
  ],
});

//Department colors
const getGenderColor = scaleOrdinal({
  domain: ["Male", "Female"],
  range: ["rgba(255,255,255,0.7)", "rgba(255,255,255,0.6)"],
});

const getDepartmentColor = scaleOrdinal({
  domain: departmentNames,
  range: [
    "rgba(255,255,255,0.5)",
    "rgba(255,255,255,0.4)",
    "rgba(255,255,255,0.3)",
    // Add more colors as needed
  ],
});

const defaultMargin = { top: 20, right: 20, bottom: 20, left: 20 };

export type PieProps = {
  width: number;
  height: number;
  margin?: typeof defaultMargin;
  animate?: boolean;
};

export default function Example({
  width,
  height,
  margin = defaultMargin,
  animate = false,
}: PieProps) {
  const [selectedDepartment, setSelectedDepartment] = useState<string | null>(
    null
  );

  if (width < 10) return null;

  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.bottom;
  const outerRadius = Math.min(innerWidth, innerHeight) / 2;
  const innerRadius = outerRadius / 2; // Adjust as needed
  const centerY = innerHeight / 2;
  const centerX = innerWidth / 2;
  const donutThickness = 50;

  const getGenderColor = scaleOrdinal({
    domain: ["Male", "Female"],
    range: ["rgba(255,255,255,0.7)", "rgba(255,255,255,0.6)"],
  });

  const getDepartmentColor = scaleOrdinal({
    domain: departmentNames,
    range: [
      "rgba(255,255,255,0.5)",
      "rgba(255,255,255,0.4)",
      "rgba(255,255,255,0.3)",
      // Add more colors as needed
    ],
  });

  return (
    <svg width={width} height={height}>
      <GradientPinkBlue id="visx-pie-gradient" />
      <rect
        rx={14}
        width={width}
        height={height}
        fill="url('#visx-pie-gradient')"
      />
      <Group top={centerY + margin.top} left={centerX + margin.left}>
        {/* Outer pie chart for gender data */}
        <Pie
          data={
            selectedDepartment
              ? departmentData.filter(
                  ({ label }) => label === selectedDepartment
                )
              : departmentData
          }
          pieValue={(d) => d.data.Male + d.data.Female}
          outerRadius={outerRadius}
          innerRadius={outerRadius - donutThickness}
          cornerRadius={3}
          padAngle={0.005}
        >
          {(pie) => (
            <AnimatedPie<DepartmentData>
              {...pie}
              animate={animate}
              getKey={(arc) => arc.data.label}
              onClickDatum={({ data: { label } }) =>
                animate &&
                setSelectedDepartment(
                  selectedDepartment && selectedDepartment === label
                    ? null
                    : label
                )
              }
              getColor={(arc) => getGenderColor(arc.data.label)}
            />
          )}
        </Pie>
        {/* Inner pie chart for department data */}
        {/* <Pie
          data={departmentData}
          pieValue={(d) => d.data.Male + d.data.Female}
          outerRadius={innerRadius}
          innerRadius={0}
          cornerRadius={3}
          padAngle={0.005}
        >
          {(pie) => (
            <AnimatedPie<DepartmentData>
              {...pie}
              animate={animate}
              getKey={(arc) => arc.data.label}
              onClickDatum={({ data: { label } }) =>
                animate &&
                setSelectedDepartment(
                  selectedDepartment && selectedDepartment === label
                    ? null
                    : label
                )
              }
              getColor={(arc) => getDepartmentColor(arc.data.label)}
            />
          )}
        </Pie> */}
      </Group>
      {animate && (
        <text
          textAnchor="end"
          x={width - 16}
          y={height - 16}
          fill="white"
          fontSize={11}
          fontWeight={300}
          pointerEvents="none"
        >
          Click segments to update
        </text>
      )}
    </svg>
  );
}

// react-spring transition definitions
type AnimatedStyles = { startAngle: number; endAngle: number; opacity: number };

const fromLeaveTransition = ({ endAngle }: PieArcDatum<any>) => ({
  // enter from 360° if end angle is > 180°
  startAngle: endAngle > Math.PI ? 2 * Math.PI : 0,
  endAngle: endAngle > Math.PI ? 2 * Math.PI : 0,
  opacity: 0,
});
const enterUpdateTransition = ({ startAngle, endAngle }: PieArcDatum<any>) => ({
  startAngle,
  endAngle,
  opacity: 1,
});

type AnimatedPieProps<Datum> = ProvidedProps<Datum> & {
  animate?: boolean;
  getKey: (d: PieArcDatum<Datum>) => string;
  getColor: (d: PieArcDatum<Datum>) => string;
  onClickDatum: (d: PieArcDatum<Datum>) => void;
  delay?: number;
};

function AnimatedPie<Datum>({
  animate,
  arcs,
  path,
  getKey,
  getColor,
  onClickDatum,
}: AnimatedPieProps<Datum>) {
  const transitions = useTransition<PieArcDatum<Datum>, AnimatedStyles>(arcs, {
    from: animate ? fromLeaveTransition : enterUpdateTransition,
    enter: enterUpdateTransition,
    update: enterUpdateTransition,
    leave: animate ? fromLeaveTransition : enterUpdateTransition,
    keys: getKey,
  });
  return transitions((props, arc, { key }) => {
    const [centroidX, centroidY] = path.centroid(arc);
    const hasSpaceForLabel = arc.endAngle - arc.startAngle >= 0.1;

    return (
      <g key={key}>
        <animated.path
          // compute interpolated path d attribute from intermediate angle values
          d={interpolate(
            [props.startAngle, props.endAngle],
            (startAngle, endAngle) =>
              path({
                ...arc,
                startAngle,
                endAngle,
              })
          )}
          fill={getColor(arc)}
          onClick={() => onClickDatum(arc)}
          onTouchStart={() => onClickDatum(arc)}
        />
        {hasSpaceForLabel && (
          <animated.g style={{ opacity: props.opacity }}>
            <text
              fill="white"
              x={centroidX}
              y={centroidY}
              dy=".33em"
              fontSize={9}
              textAnchor="middle"
              pointerEvents="none"
            >
              {getKey(arc)}
            </text>
          </animated.g>
        )}
      </g>
    );
  });
}
